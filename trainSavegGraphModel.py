# -*- coding: utf-8 -*-
"""trainSaveGraphModel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12BFrJ3-mmjqSkkOhbTlywRVshIlDOBWg
"""

#entrenar modelo y guardarlo
import pandas as pd
import numpy as np

data = pd.read_excel('/content/datosEntrenarModelo.xlsx')
#data.info()

# Guardar en un dataframe solo las variables que nos importan
target = data['ETPF56']
Y=pd.DataFrame.from_dict(target) # variable dependiente
variables = data[['Mj/m2/d','TMax', 'TMin', 'PVA', 'Viento']]
X=pd.DataFrame.from_dict(variables) # variables independientes

# Dividir el conjunto de datos en entramiento y prueba (se usar치 para evaluar el modelo)
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, shuffle = False)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

from sklearn.preprocessing import PolynomialFeatures
poly = PolynomialFeatures(degree=3) #instance of PolynomialFeatures
x_poly = poly.fit_transform(X_train) #we create the new polynomial features.
poly.fit(X_train, Y_train)

#Creating a polynomial regression model
from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(x_poly, Y_train)

predicted = model.predict(poly.fit_transform(X_test))
expected= Y_test

# ------------------------------- # 
# ----- E V A L U A T I O N------ # 
# ------------------------------- # 
from sklearn.metrics import mean_squared_error
poly_reg_rmse = np.sqrt(mean_squared_error(Y_test, predicted))

from sklearn.metrics import r2_score
# The coefficient of determination: 1 is perfect prediction
coeficiente = r2_score(Y_test, predicted)
mensaje = "Observacion: {:.0%} de los datos se ajusta al modelo. Es decir, {:.0%} de variaci칩n en y explicada por variables x.".format(coeficiente, coeficiente)
#print(mensaje)

import pickle
pickle.dump(model, open('ModeloEntrenado.sav', 'wb')) #writebinary

# Graficar los resultados
import matplotlib.pyplot as plt

# Obtener los valores predichos
predicted = model.predict(poly.fit_transform(X_test))

# Crear una figura y un eje
fig, ax = plt.subplots()

# Graficar los valores esperados en azul
ax.plot(expected.values, color='blue', label='Valores esperados')

# Graficar los valores predichos en rojo
ax.plot(predicted, color='red', label='Valores predichos')

# Configurar el gr치fico
ax.set_xlabel('Muestras')
ax.set_ylabel('ETP Fao Penman-Monteith (mm/d)')
ax.legend()

# Mostrar el gr치fico
plt.title("polynomial regression model", size=16)
plt.show()